
name: uda-party CI/CD

on:
  push:
    branches: [ main ]
  # pull_request:
  #   branches: [ prod ]
    # paths-ignore:
    # - "migrations/**"


jobs:
  build:

    runs-on: ubuntu-latest
    name: build

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        pip install -r requirements.txt


    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Collectstatic, makemigrations & migrate
      run: |

        # cd ~/actions-runner/deploy/uda-party/uda-party        
        python manage.py collectstatic
        # python manage.py makemigrations users
        # python manage.py makemigrations dashboard
        python manage.py makemigrations

        python manage.py migrate

    - name: Run Tests
      run: |
        python manage.py test home



  # deploy:
  #   runs-on: self-hosted
  #   needs: build
  #   name: deploy


  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8

  #   - name: Install Dependencies
  #     run: |
  #       pwd
  #       cd ~/actions-runner/deploy/uda-party/uda-party
        
  #       python -m pip install --upgrade pip    
  #       python -m pip install tree
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  #   - name: Create ENV VAR
  #     run: |  
  #       touch ~/uda-party/.env
  #       cp ~/uda-party/.env  ~/actions-runner/deploy/uda-party/uda-party


  #   - name: Create Migrations Backup Directories
  #     run: | 
  #       mkdir -p ~/uda-party/uda-party/migrations/dashboard/migrations
  #       mkdir -p ~/uda-party/uda-party/migrations/users/migrations


  #       cd ~/uda-party/uda-party/migrations
  #       tree


  #   - name: RSYNC Backup Migrations To Workin Directory
  #     run: |

  #       rsync -a --delete ~/uda-party/uda-party/migrations/dashboard/migrations ~/actions-runner/deploy/uda-party/uda-party/dashboard
  #       rsync -a --delete ~/uda-party/uda-party/migrations/users/migrations ~/actions-runner/deploy/uda-party/uda-party/users
         
  #   - name: COLLECTSTATIC
  #     run: |
  #       cd ~/actions-runner/deploy/uda-party/uda-party                
  #       python manage.py collectstatic

  #   - name: MAKEMIGRATIONS
  #     run: |
  #       cd ~/actions-runner/deploy/o/uda-party  

  #       python manage.py makemigrations users
  #       python manage.py makemigrations dashboard


  #   ## dashboard    
  #   - name: MIGRATE-dashboard
  #     run: |
  #       cd ~/actions-runner/deploy/uda-party/uda-party        
  #       python manage.py migrate dashboard

  #   - name: Rsync Workin Directory to Backup Migrations-dashboard
  #     run: |
  #       rsync -a --delete ~/actions-runner/deploy/uda-party/uda-party/dashboard/migrations ~/uda-party/uda-party/migrations/dashboard
  #       cd ~/uda-party/uda-party/migrations/dashboard
  #       tree

  #   ## users
  #   - name: MIGRATE-users
  #     run: |
  #       cd ~/actions-runner/deploy/uda-party/uda-party        
  #       python manage.py migrate users

  #   - name: Rsync Workin Directory to Backup Migrations-users
  #     run: |
  #       rsync -a --delete ~/actions-runner/deploy/uda-party/uda-party/users/migrations ~/uda-party/uda-party/migrations/users
  #       cd ~/uda-party/uda-party/migrations/users
  #       tree    


  #   - name: Backup Migrations_Updated
  #     run: |
  #       cd ~/uda-party/uda-party/migrations
  #       tree


    # - name: Run Tests
    #   run: |
    #     python manage.py test


    # - name: Reload
    #   run: |
    #     sudo shutdown -r now
